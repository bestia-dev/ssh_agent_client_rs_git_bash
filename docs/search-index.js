var searchIndex = new Map(JSON.parse('[["ssh_agent_client_rs_git_bash",{"t":"FKNNNNMNHCNHNNHHHHHHNNNONNNNNPPGPPINNNNNNNNNNNNN","n":["Client","GitBash","add_identity","borrow","borrow_mut","connect","connect_to_git_bash_or_linux","","do_secret_handshake_with_remote_end","error","from","get_uid","into","list_identities","order_bytes_pid_uid_gid","parse_fake_socket_metadata","parse_guid_and_change_byte_order","parse_uid","prepare_pid_uid_gid","read_and_parse_fake_socket_file","remove_all_identities","remove_identity","sign","socket","try_from","try_into","type_id","vzip","with_read_write","AgentCommunicationError","Err","Error","GitBashErrorMessage","Ok","Result","borrow","borrow_mut","fmt","","from","","into","source","to_string","try_from","try_into","type_id","vzip"],"q":[[0,"ssh_agent_client_rs_git_bash"],[29,"ssh_agent_client_rs_git_bash::error"],[48,"ssh_agent_client_rs"],[49,"ssh_key::private"],[50,"ssh_agent_client_rs::error"],[51,"core::result"],[52,"std::path"],[53,"std::net::tcp"],[54,"ssh_key::public"],[55,"alloc::vec"],[56,"alloc::string"],[57,"alloc::borrow"],[58,"ssh_key::signature"],[59,"core::any"],[60,"alloc::boxed"],[61,"core::fmt"],[62,"std::io::error"],[63,"core::error"],[64,"core::option"]],"i":"``d000Cl1``1`11``````111111111AbCn`10`1111111111111","f":"``{{{f{bd}}{f{h}}}{{n{jl}}}}{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{A`}}}{{n{dl}}}}{{{f{A`}}}{{n{dAb}}}}0{{{f{Ad}}{f{bAf}}}{{n{jAb}}}}`{cc{}}{{}{{n{AhAb}}}}{{}c{}}{{{f{bd}}}{{n{{Al{Aj}}l}}}}{{AhAhAh}{{n{{B`{An}}Ab}}}}{{{f{Ad}}}{{n{{Bd{BbBb}}Ab}}}}{{{f{Ad}}}{{n{{B`{An}}Ab}}}}{{{Bf{Ad}}}{{n{AhAb}}}}{{}{{n{{B`{An}}Ab}}}}{{{f{A`}}}{{n{{Bd{BbBb}}Ab}}}}{{{f{bd}}}{{n{jl}}}}{{{f{bd}}{f{h}}}{{n{jl}}}}{{{f{bd}}{f{Aj}}{f{{Bh{An}}}}}{{n{Bjl}}}}`{c{{n{e}}}{}{}}{{}{{n{c}}}{}}{fBl}{{}c{}}{{{C`{Bn}}}d}``````{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{Ab}}{f{bCb}}}Cd}0{cc{}}{CfAb}{{}c{}}{{{f{Ab}}}{{Cj{{f{Ch}}}}}}{fBb}<;:9","D":"Cj","p":[[0,"mut"],[5,"Client",0,48],[1,"reference",null,null,1],[5,"PrivateKey",49],[1,"unit"],[6,"Error",50],[6,"Result",51,null,1],[5,"Path",52],[6,"Error",29],[1,"str"],[5,"TcpStream",53],[1,"u32"],[5,"PublicKey",54],[5,"Vec",55],[1,"u8"],[1,"array"],[5,"String",56],[1,"tuple",null,null,1],[6,"Cow",57],[1,"slice"],[5,"Signature",58],[5,"TypeId",59],[10,"ReadWrite",48],[5,"Box",60,null,1],[5,"Formatter",61],[8,"Result",61],[5,"Error",62],[10,"Error",63],[6,"Option",64,null,1],[10,"GitBash",0],[8,"Result",29]],"r":[[0,48],[2,48],[3,48],[4,48],[5,48],[7,48],[10,48],[12,48],[13,48],[20,48],[21,48],[22,48],[23,48],[24,48],[25,48],[26,48],[27,48],[28,48]],"b":[[37,"impl-Display-for-Error"],[38,"impl-Debug-for-Error"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABMABQAEAAMAGAAEACQAAwApAAAAKwAFAA==","P":[[3,"T"],[5,""],[10,"T"],[11,""],[12,"U"],[13,""],[24,"U,T"],[25,"U"],[26,""],[27,"V"],[28,""],[35,"T"],[37,""],[39,"T"],[40,""],[41,"U"],[42,""],[44,"U,T"],[45,"U"],[46,""],[47,"V"]]}],["ssh_agent_client_rs_git_bash",{"t":"FKNNNNMNHCNHNNHHHHHHNNNONNNNNPPGPPIPNNNNNNNNNNNNNN","n":["Client","GitBash","add_identity","borrow","borrow_mut","connect","connect_to_git_bash_or_linux","","do_secret_handshake_with_remote_end","error","from","get_uid","into","list_identities","order_bytes_pid_uid_gid","parse_fake_socket_metadata","parse_guid_and_change_byte_order","parse_uid","prepare_pid_uid_gid","read_and_parse_fake_socket_file","remove_all_identities","remove_identity","sign","socket","try_from","try_into","type_id","vzip","with_read_write","AgentCommunication","Err","Error","GitBashErrorMessage","Ok","Result","SshAgentClientRs","borrow","borrow_mut","fmt","","from","","","into","source","to_string","try_from","try_into","type_id","vzip"],"q":[[0,"ssh_agent_client_rs_git_bash"],[29,"ssh_agent_client_rs_git_bash::error"],[50,"ssh_agent_client_rs"],[51,"ssh_key::private"],[52,"ssh_agent_client_rs::error"],[53,"core::result"],[54,"std::path"],[55,"std::net::tcp"],[56,"ssh_key::public"],[57,"alloc::vec"],[58,"alloc::string"],[59,"alloc::borrow"],[60,"ssh_key::signature"],[61,"core::any"],[62,"alloc::boxed"],[63,"core::fmt"],[64,"std::io::error"],[65,"core::error"],[66,"core::option"]],"i":"``d000Cl1``1`11``````111111111AbCn`10`111111111111111","f":"``{{{f{bd}}{f{h}}}{{n{jl}}}}{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{A`}}}{{n{dl}}}}{{{f{A`}}}{{n{dAb}}}}0{{{f{Ad}}{f{bAf}}}{{n{jAb}}}}`{cc{}}{{}{{n{AhAb}}}}{{}c{}}{{{f{bd}}}{{n{{Al{Aj}}l}}}}{{AhAhAh}{{n{{B`{An}}Ab}}}}{{{f{Ad}}}{{n{{Bd{BbBb}}Ab}}}}{{{f{Ad}}}{{n{{B`{An}}Ab}}}}{{{Bf{Ad}}}{{n{AhAb}}}}{{}{{n{{B`{An}}Ab}}}}{{{f{A`}}}{{n{{Bd{BbBb}}Ab}}}}{{{f{bd}}}{{n{jl}}}}{{{f{bd}}{f{h}}}{{n{jl}}}}{{{f{bd}}{f{Aj}}{f{{Bh{An}}}}}{{n{Bjl}}}}`{c{{n{e}}}{}{}}{{}{{n{c}}}{}}{fBl}{{}c{}}{{{C`{Bn}}}d}```````{f{{f{c}}}{}}{{{f{b}}}{{f{bc}}}{}}{{{f{Ab}}{f{bCb}}}Cd}0{CfAb}{lAb}{cc{}}{{}c{}}{{{f{Ab}}}{{Cj{{f{Ch}}}}}}{fBb}=<;:","D":"Cj","p":[[0,"mut"],[5,"Client",0,50],[1,"reference",null,null,1],[5,"PrivateKey",51],[1,"unit"],[6,"Error",52],[6,"Result",53,null,1],[5,"Path",54],[6,"Error",29],[1,"str"],[5,"TcpStream",55],[1,"u32"],[5,"PublicKey",56],[5,"Vec",57],[1,"u8"],[1,"array"],[5,"String",58],[1,"tuple",null,null,1],[6,"Cow",59],[1,"slice"],[5,"Signature",60],[5,"TypeId",61],[10,"ReadWrite",50],[5,"Box",62,null,1],[5,"Formatter",63],[8,"Result",63],[5,"Error",64],[10,"Error",65],[6,"Option",66,null,1],[10,"GitBash",0],[8,"Result",29]],"r":[[0,50],[2,50],[3,50],[4,50],[5,50],[7,50],[10,50],[12,50],[13,50],[20,50],[21,50],[22,50],[23,50],[24,50],[25,50],[26,50],[27,50],[28,50]],"b":[[38,"impl-Display-for-Error"],[39,"impl-Debug-for-Error"],[40,"impl-From%3CError%3E-for-Error"],[41,"impl-From%3CError%3E-for-Error"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAABUABAAEAAMAGAAEACQABgAtAAUA","P":[[3,"T"],[5,""],[10,"T"],[11,""],[12,"U"],[13,""],[24,"U,T"],[25,"U"],[26,""],[27,"V"],[28,""],[36,"T"],[38,""],[42,"T"],[43,"U"],[44,""],[46,"U,T"],[47,"U"],[48,""],[49,"V"]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[2851,2939]}