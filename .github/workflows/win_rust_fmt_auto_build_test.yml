name: win_rust_fmt_auto_build_test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  win_rust_fmt_auto_build_test:

    runs-on: windows-latest

    steps:
    - name: checkout
      uses: actions/checkout@v4

    - name: cargo fmt -- --check
      run: cargo fmt -- --check

    - name: Run cache for rust dependencies
      uses: Swatinem/rust-cache@v2.7.7

    - name: Configure sccache
      run: printf "RUSTC_WRAPPER=sccache\n" >> $GITHUB_ENV; printf "SCCACHE_GHA_ENABLED=true\n" >> $GITHUB_ENV

    - name: Run sccache-cache for artifacts
      uses: mozilla-actions/sccache-action@v0.0.8

    - name: cargo clippy --no-deps
      run: cargo clippy --no-deps

    - name: install and cache cargo-auto
      uses: baptiste0928/cargo-install@v3.3.0
      with:
        crate: cargo-auto

    - name: Cache for automation tasks
      uses: actions/cache@v4.2.2
      with:
        path: |
          /home/runner/work/cargo-auto/cargo-auto/automation_tasks_rs/.file_hashes.json 
          /home/runner/work/cargo-auto/cargo-auto/automation_tasks_rs/target 
          /home/runner/work/cargo-auto/cargo-auto/automation_tasks_rs/Cargo.toml
        key: automation_tasks_rs

    - name: cargo auto build
      run: cargo auto build

    - name: install Git for Windows
      run: choco install git.install

    - uses: 1arp/create-a-file-action@0.4.5
      with:
        path: c:\\Users\\runneradmin\\.ssh
        isAbsolutePath: true
        file: agent.env
        content: 

    - uses: 1arp/create-a-file-action@0.4.5
      with:
        path: c:\\Users\\runneradmin
        isAbsolutePath: true
        file: .bashrc
        content: |
          printf "Run ssh-agent and write SSH_AUTH_SOCK \n"
          env=~/.ssh/agent.env
          agent_load_env () { test -f "$env" && . "$env" | /dev/null ; }
          agent_start () {
            (umask 077; ssh-agent >| "$env")
          . "$env" >| /dev/null ; }
          agent_load_env
          # agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2= agent not running
          agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)
          if [ ! "$SSH_AUTH_SOCK" ] || [ $agent_run_state = 2 ]; then
            printf "  \033[33m Starting ssh-agent as a windows process in the background... \033[0m\n"
            agent_start
            # printf "Setting Windows SSH user environment variables (pid: $SSH_AGENT_PID, sock: $SSH_AUTH_SOCK)\n"
            setx SSH_AGENT_PID "$SSH_AGENT_PID" > /dev/null
            setx SSH_AUTH_SOCK "$SSH_AUTH_SOCK" > /dev/null
          fi
          unset env
          printf " \n"
          ssh-add -l
          printf " exit with code 0 \n"
          exit 0

    - name:  "ssh-add -l"
      shell: bash
      run: ssh-add -l

    - name: cargo test
      run: cargo test
